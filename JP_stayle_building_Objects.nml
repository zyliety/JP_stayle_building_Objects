/*
 *  Copyright (C) 2024 Zyliety's Plant Set V1
 *  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.
 *  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/

// define the newgrf
grf {
    grfid:                  "JPBO";
    name:                   string(STR_GRF_NAME);
    desc:                   string(STR_GRF_DESCRIPTION);
    version:                1;
    min_compatible_version: 1;
}
template template_flat_low_building(x,y,filename) {
    [x+14, y+2, 64, 44, -31, -13, ANIM, filename]
    [x+89, y+2, 64, 44, -31, -13, ANIM, filename]
    [x+164, y+2, 64, 44, -31, -13, ANIM, filename]
    [x+239, y+2, 64, 44, -31, -13, ANIM, filename]
}
template template_flat_low(x,y,filename) {
    [x+14, y+2, 64, 44, -31, -13, filename]
    [x+89, y+2, 64, 44, -31, -13, filename]
    [x+164, y+2, 64, 44, -31, -13, filename]
    [x+239, y+2, 64, 44, -31, -13, filename]
}
template template_tallflat(x,y,filename) {
    [x+14, y+2, 64, 244, -31, -213, filename]
    [x+89, y+2, 64, 244, -31, -213, filename]
    [x+164, y+2, 64, 244, -31, -213, filename]
    [x+239, y+2, 64, 244, -31, -213, filename]
}
/***************************************************
THIS ENTRY MUST BE THE FIRST OBJECT BEFORE ANY OTHERS
*****************************************************/

//spritesets with 4 directions, SNOW-version and the PURCHASE-menu
spriteset (spriteset_ObjectMenu) {
    template_flat_low(0,0,"gfx/flatlow.png")
}
alternative_sprites (spriteset_ObjectMenu, ZOOM_LEVEL_NORMAL, BIT_DEPTH_32BPP, "") {
    template_flat_low(0,0,"gfx/ObjectMenu_32.png")
}

spriteset (spriteset_ObjectMenu_SNOW) {
    template_flat_low(0,0,"gfx/flatlow.png")
}
alternative_sprites (spriteset_ObjectMenu_SNOW, ZOOM_LEVEL_NORMAL, BIT_DEPTH_32BPP, "") {
    template_flat_low(0,0,"gfx/ObjectMenu_32.png")
}

spriteset (spriteset_ObjectMenu_PURCHASE) {
    template_flat_low(0,0,"gfx/flatlow.png")
}
alternative_sprites (spriteset_ObjectMenu_PURCHASE, ZOOM_LEVEL_NORMAL, BIT_DEPTH_32BPP, "") {
    template_flat_low(0,0,"gfx/ObjectMenu_32.png")
}

/* spritelayouts */

//Direction_1
spritelayout spritelayout_ObjectMenu_1 {
    ground {
      // normal ground sprite - always draw
      sprite: LOAD_TEMP(0) + LOAD_TEMP(1);
   }
    
    building {
        sprite: spriteset_ObjectMenu(0);
        hide_sprite: nearby_tile_height(0, 0) >= snowline_height;
        xoffset: 0; //from NE edge
        yoffset: 0; //from NW edge
        zoffset: 0;
        xextent: 16;
        yextent: 16;
        zextent: 0;
    }

building {
        sprite: spriteset_ObjectMenu_SNOW(0);
        hide_sprite: nearby_tile_height(0, 0) < snowline_height;
        xoffset: 0; //from NE edge
        yoffset: 0; //from NW edge
        zoffset: 0;
        xextent: 16;
        yextent: 16;
        zextent: 0;
    }

}

spritelayout spritelayout_ObjectMenu_1_purchase {
   ground {
        sprite: GROUNDSPRITE_NORMAL;
   }
   building {
      sprite: spriteset_ObjectMenu_PURCHASE(0);
      xoffset: 0; //from NE edge
                yoffset: 0; //from NW edge
                zoffset: 0;
                xextent: 16;
                yextent: 16;
                zextent: 0;
   }
}



//Direction_2
spritelayout spritelayout_ObjectMenu_2 {
    ground {
      // normal ground sprite - always draw
      sprite: LOAD_TEMP(0) + LOAD_TEMP(1);
   }
    
    building {
        sprite: spriteset_ObjectMenu(1);
        hide_sprite: nearby_tile_height(0, 0) >= snowline_height;
        xoffset: 0; //from NE edge
        yoffset: 0; //from NW edge
        zoffset: 0;
        xextent: 16;
        yextent: 16;
        zextent: 0;
    }

building {
        sprite: spriteset_ObjectMenu_SNOW(1);
        hide_sprite: nearby_tile_height(0, 0) < snowline_height;
        xoffset: 0; //from NE edge
        yoffset: 0; //from NW edge
        zoffset: 0;
        xextent: 16;
        yextent: 16;
        zextent: 0;
    }

}

spritelayout spritelayout_ObjectMenu_2_purchase {
   ground {
        sprite: GROUNDSPRITE_NORMAL;
   }
   building {
      sprite: spriteset_ObjectMenu_PURCHASE(1);
      xoffset: 0; //from NE edge
                yoffset: 0; //from NW edge
                zoffset: 0;
                xextent: 16;
                yextent: 16;
                zextent: 0;
   }
}

//Direction_3
spritelayout spritelayout_ObjectMenu_3 {
    ground {
      // normal ground sprite - always draw
      sprite: LOAD_TEMP(0) + LOAD_TEMP(1);
   }
    
    building {
        sprite: spriteset_ObjectMenu(2);
        hide_sprite: nearby_tile_height(0, 0) >= snowline_height;
        xoffset: 0; //from NE edge
        yoffset: 0; //from NW edge
        zoffset: 0;
        xextent: 16;
        yextent: 16;
        zextent: 0;
    }

building {
        sprite: spriteset_ObjectMenu_SNOW(2);
        hide_sprite: nearby_tile_height(0, 0) < snowline_height;
        xoffset: 0; //from NE edge
        yoffset: 0; //from NW edge
        zoffset: 0;
        xextent: 16;
        yextent: 16;
        zextent: 0;
    }

}

spritelayout spritelayout_ObjectMenu_3_purchase {
   ground {
        sprite: GROUNDSPRITE_NORMAL;
   }
   building {
      sprite: spriteset_ObjectMenu_PURCHASE(2);
      xoffset: 0; //from NE edge
                yoffset: 0; //from NW edge
                zoffset: 0;
                xextent: 16;
                yextent: 16;
                zextent: 0;
   }
}


//Direction_4
spritelayout spritelayout_ObjectMenu_4 {
    ground {
      // normal ground sprite - always draw
      sprite: LOAD_TEMP(0) + LOAD_TEMP(1);
   }
    
    building {
        sprite: spriteset_ObjectMenu(3);
        hide_sprite: nearby_tile_height(0, 0) >= snowline_height;
        xoffset: 0; //from NE edge
        yoffset: 0; //from NW edge
        zoffset: 0;
        xextent: 16;
        yextent: 16;
        zextent: 0;
    }

building {
        sprite: spriteset_ObjectMenu_SNOW(3);
        hide_sprite: nearby_tile_height(0, 0) < snowline_height;
        xoffset: 0; //from NE edge
        yoffset: 0; //from NW edge
        zoffset: 0;
        xextent: 16;
        yextent: 16;
        zextent: 0;
    }

}

spritelayout spritelayout_ObjectMenu_4_purchase {
   ground {
        sprite: GROUNDSPRITE_NORMAL;
   }
   building {
      sprite: spriteset_ObjectMenu_PURCHASE(3);
      xoffset: 0; //from NE edge
                yoffset: 0; //from NW edge
                zoffset: 0;
                xextent: 16;
                yextent: 16;
                zextent: 0;
   }
}

//decide spritelayout for each of the 4 directions
switch (FEAT_OBJECTS, SELF, switch_ObjectMenu_view, view) {
    1:  spritelayout_ObjectMenu_2;
    2:  spritelayout_ObjectMenu_3;
    3:  spritelayout_ObjectMenu_4;
    spritelayout_ObjectMenu_1;
}

//calculate ground sprite for object
switch (FEAT_OBJECTS, SELF, switch_ObjectMenu_object, [
    STORE_TEMP(0, 0),
    STORE_TEMP(GROUNDSPRITE_NORMAL, 1),
    STORE_TEMP(terrain_type == TILETYPE_DESERT ? GROUNDSPRITE_DESERT : LOAD_TEMP(1), 1),
    STORE_TEMP(terrain_type == TILETYPE_SNOW   ? GROUNDSPRITE_SNOW : LOAD_TEMP(1), 1),
    STORE_TEMP(snowline_height == 0xFF ? 0xFF : nearby_tile_height(0,0) - snowline_height, 127),
    STORE_TEMP((LOAD_TEMP(127) == -1) ? GROUNDSPRITE_SNOW_1_4 : LOAD_TEMP(1), 1),
    STORE_TEMP((LOAD_TEMP(127) ==  0) ? GROUNDSPRITE_SNOW_2_4 : LOAD_TEMP(1), 1),
    STORE_TEMP((LOAD_TEMP(127) ==  1) ? GROUNDSPRITE_SNOW_3_4 : LOAD_TEMP(1), 1)
        ]) {
    switch_ObjectMenu_view;
}

//calculate ground sprite for purchase menu
switch (FEAT_OBJECTS, SELF, switch_ObjectMenu_purchase, view) {
    1:  spritelayout_ObjectMenu_2_purchase;
    2:  spritelayout_ObjectMenu_3_purchase;
    3:  spritelayout_ObjectMenu_4_purchase;
    spritelayout_ObjectMenu_1_purchase;
}

item (FEAT_OBJECTS, ObjectMenu, 000) {
    property {
        class: "JPBO";
        classname: string(STR_JPBO);
        name: string(STR_ObjectMenu);
        climates_available: ALL_CLIMATES;
        size: [1,1];
        build_cost_multiplier: 0;
        remove_cost_multiplier: 2;
        introduction_date:      date(1111,1,1);
        end_of_life_date: 0xFFFFFFFF;
        object_flags: bitmask(OBJ_FLAG_ANYTHING_REMOVE, OBJ_FLAG_ALLOW_BRIDGE, OBJ_FLAG_REMOVE_IS_INCOME);
        height: 0;
        num_views: 4;
     }
    graphics {
        default: switch_ObjectMenu_object;
        purchase: switch_ObjectMenu_purchase;
        autoslope: return CB_RESULT_AUTOSLOPE;

      }
}
//************warehouse************//
//spritesets with 4 directions, SNOW-version and the PURCHASE-menu
spriteset (spriteset_warehouse) {
    template_tallflat(0,0,"gfx/warehouse.png")
}

spriteset (spriteset_warehouse_SNOW) {
    template_tallflat(0,0,"gfx/warehouse_snow.png")
}

spriteset (spriteset_warehouse_PURCHASE) {
    template_tallflat(0,0,"gfx/warehouse.png")
}
/* spritelayouts */

//Direction_1
spritelayout spritelayout_warehouse_1 {
    ground {
      // normal ground sprite - always draw
      sprite: LOAD_TEMP(0) + LOAD_TEMP(1);
   }
    
    building {
        sprite: spriteset_warehouse(0);
        hide_sprite: nearby_tile_height(0, 0) >= snowline_height;
        xoffset: 0; //from NE edge
        yoffset: 0; //from NW edge
        zoffset: 0;
        xextent: 16;
        yextent: 16;
        zextent: 16;
    }

building {
        sprite: spriteset_warehouse_SNOW(0);
        hide_sprite: nearby_tile_height(0, 0) < snowline_height;
        xoffset: 0; //from NE edge
        yoffset: 0; //from NW edge
        zoffset: 0;
        xextent: 16;
        yextent: 16;
        zextent: 16;
    }

}

spritelayout spritelayout_warehouse_1_purchase {
   ground {
        sprite: GROUNDSPRITE_NORMAL;
   }
   building {
      sprite: spriteset_warehouse_PURCHASE(0);
      xoffset: 0; //from NE edge
                yoffset: 0; //from NW edge
                zoffset: 0;
                xextent: 16;
                yextent: 16;
                zextent: 16;
   }
}



//Direction_2
spritelayout spritelayout_warehouse_2 {
    ground {
      // normal ground sprite - always draw
      sprite: LOAD_TEMP(0) + LOAD_TEMP(1);
   }
    
    building {
        sprite: spriteset_warehouse(1);
        hide_sprite: nearby_tile_height(0, 0) >= snowline_height;
        xoffset: 0; //from NE edge
        yoffset: 0; //from NW edge
        zoffset: 0;
        xextent: 16;
        yextent: 16;
        zextent: 16;
    }

building {
        sprite: spriteset_warehouse_SNOW(1);
        hide_sprite: nearby_tile_height(0, 0) < snowline_height;
        xoffset: 0; //from NE edge
        yoffset: 0; //from NW edge
        zoffset: 0;
        xextent: 16;
        yextent: 16;
        zextent: 16;
    }

}

spritelayout spritelayout_warehouse_2_purchase {
   ground {
        sprite: GROUNDSPRITE_NORMAL;
   }
   building {
      sprite: spriteset_warehouse_PURCHASE(1);
      xoffset: 0; //from NE edge
                yoffset: 0; //from NW edge
                zoffset: 0;
                xextent: 16;
                yextent: 16;
                zextent: 16;
   }
}

//Direction_3
spritelayout spritelayout_warehouse_3 {
    ground {
      // normal ground sprite - always draw
      sprite: LOAD_TEMP(0) + LOAD_TEMP(1);
   }
    
    building {
        sprite: spriteset_warehouse(2);
        hide_sprite: nearby_tile_height(0, 0) >= snowline_height;
        xoffset: 0; //from NE edge
        yoffset: 0; //from NW edge
        zoffset: 0;
        xextent: 16;
        yextent: 16;
        zextent: 16;
    }

building {
        sprite: spriteset_warehouse_SNOW(2);
        hide_sprite: nearby_tile_height(0, 0) < snowline_height;
        xoffset: 0; //from NE edge
        yoffset: 0; //from NW edge
        zoffset: 0;
        xextent: 16;
        yextent: 16;
        zextent: 16;
    }

}

spritelayout spritelayout_warehouse_3_purchase {
   ground {
        sprite: GROUNDSPRITE_NORMAL;
   }
   building {
      sprite: spriteset_warehouse_PURCHASE(2);
      xoffset: 0; //from NE edge
                yoffset: 0; //from NW edge
                zoffset: 0;
                xextent: 16;
                yextent: 16;
                zextent: 16;
   }
}


//Direction_4
spritelayout spritelayout_warehouse_4 {
    ground {
      // normal ground sprite - always draw
      sprite: LOAD_TEMP(0) + LOAD_TEMP(1);
   }
    
    building {
        sprite: spriteset_warehouse(3);
        hide_sprite: nearby_tile_height(0, 0) >= snowline_height;
        xoffset: 0; //from NE edge
        yoffset: 0; //from NW edge
        zoffset: 0;
        xextent: 16;
        yextent: 16;
        zextent: 16;
    }

building {
        sprite: spriteset_warehouse_SNOW(3);
        hide_sprite: nearby_tile_height(0, 0) < snowline_height;
        xoffset: 0; //from NE edge
        yoffset: 0; //from NW edge
        zoffset: 0;
        xextent: 16;
        yextent: 16;
        zextent: 16;
    }

}

spritelayout spritelayout_warehouse_4_purchase {
   ground {
        sprite: GROUNDSPRITE_NORMAL;
   }
   building {
      sprite: spriteset_warehouse_PURCHASE(3);
      xoffset: 0; //from NE edge
                yoffset: 0; //from NW edge
                zoffset: 0;
                xextent: 16;
                yextent: 16;
                zextent: 16;
   }
}
//decide spritelayout for each of the 4 directions
switch (FEAT_OBJECTS, SELF, switch_warehouse_view, view) {
    1:  spritelayout_warehouse_2;
    2:  spritelayout_warehouse_3;
    3:  spritelayout_warehouse_4;
    spritelayout_warehouse_1;
}

//calculate ground sprite for object
switch (FEAT_OBJECTS, SELF, switch_warehouse_object, [
//  STORE_TEMP(0, 0),
    STORE_TEMP(slope_to_sprite_offset(tile_slope), 0),
    STORE_TEMP(GROUNDSPRITE_NORMAL, 1),
    STORE_TEMP(terrain_type == TILETYPE_DESERT ? GROUNDSPRITE_DESERT : LOAD_TEMP(1), 1),
    STORE_TEMP(terrain_type == TILETYPE_SNOW   ? GROUNDSPRITE_SNOW : LOAD_TEMP(1), 1),
    STORE_TEMP(snowline_height == 0xFF ? 0xFF : nearby_tile_height(0,0) - snowline_height, 127),
    STORE_TEMP((LOAD_TEMP(127) == -1) ? GROUNDSPRITE_SNOW_1_4 : LOAD_TEMP(1), 1),
    STORE_TEMP((LOAD_TEMP(127) ==  0) ? GROUNDSPRITE_SNOW_2_4 : LOAD_TEMP(1), 1),
    STORE_TEMP((LOAD_TEMP(127) ==  1) ? GROUNDSPRITE_SNOW_3_4 : LOAD_TEMP(1), 1)
        ]) {
    switch_warehouse_view;
}

//calculate ground sprite for purchase menu
switch (FEAT_OBJECTS, SELF, switch_warehouse_purchase, view) {
    1:  spritelayout_warehouse_2_purchase;
    2:  spritelayout_warehouse_3_purchase;
    3:  spritelayout_warehouse_4_purchase;
    spritelayout_warehouse_1_purchase;
}

item (FEAT_OBJECTS, warehouse, 001) {
    property {
        class: "PRER";
        classname: string(STR_PRER);
        name: string(STR_JPB1);
        climates_available: ALL_CLIMATES;
        size: [1,1];
        build_cost_multiplier: 1;
        remove_cost_multiplier: 4;
        introduction_date:      date(1111,1,1);
        end_of_life_date: 0xFFFFFFFF;
        object_flags: bitmask(OBJ_FLAG_ANYTHING_REMOVE, OBJ_FLAG_ALLOW_BRIDGE, OBJ_FLAG_REMOVE_IS_INCOME);
        height: 2;
        num_views: 4;
     }
    graphics {
        default: switch_warehouse_object;
        purchase: switch_warehouse_purchase;
        autoslope: return CB_RESULT_AUTOSLOPE;

      }
}
//************Houbunsha************//
//spritesets with 4 directions, SNOW-version and the PURCHASE-menu
spriteset (spriteset_Houbunsha) {
    template_tallflat(0,0,"gfx/Houbunsha.png")
}

spriteset (spriteset_Houbunsha_SNOW) {
    template_tallflat(0,0,"gfx/Houbunsha.png")
}

spriteset (spriteset_Houbunsha_PURCHASE) {
    template_tallflat(0,0,"gfx/Houbunsha.png")
}
/* spritelayouts */

//Direction_1
spritelayout spritelayout_Houbunsha_1 {
    ground {
      // normal ground sprite - always draw
      sprite: LOAD_TEMP(0) + LOAD_TEMP(1);
   }
    
    building {
        sprite: spriteset_Houbunsha(0);
        hide_sprite: nearby_tile_height(0, 0) >= snowline_height;
        xoffset: 0; //from NE edge
        yoffset: 0; //from NW edge
        zoffset: 0;
        xextent: 16;
        yextent: 16;
        zextent: 16;
    }

building {
        sprite: spriteset_Houbunsha_SNOW(0);
        hide_sprite: nearby_tile_height(0, 0) < snowline_height;
        xoffset: 0; //from NE edge
        yoffset: 0; //from NW edge
        zoffset: 0;
        xextent: 16;
        yextent: 16;
        zextent: 16;
    }

}

spritelayout spritelayout_Houbunsha_1_purchase {
   ground {
        sprite: GROUNDSPRITE_NORMAL;
   }
   building {
      sprite: spriteset_Houbunsha_PURCHASE(0);
      xoffset: 0; //from NE edge
                yoffset: 0; //from NW edge
                zoffset: 0;
                xextent: 16;
                yextent: 16;
                zextent: 16;
   }
}



//Direction_2
spritelayout spritelayout_Houbunsha_2 {
    ground {
      // normal ground sprite - always draw
      sprite: LOAD_TEMP(0) + LOAD_TEMP(1);
   }
    
    building {
        sprite: spriteset_Houbunsha(1);
        hide_sprite: nearby_tile_height(0, 0) >= snowline_height;
        xoffset: 0; //from NE edge
        yoffset: 0; //from NW edge
        zoffset: 0;
        xextent: 16;
        yextent: 16;
        zextent: 16;
    }

building {
        sprite: spriteset_Houbunsha_SNOW(1);
        hide_sprite: nearby_tile_height(0, 0) < snowline_height;
        xoffset: 0; //from NE edge
        yoffset: 0; //from NW edge
        zoffset: 0;
        xextent: 16;
        yextent: 16;
        zextent: 16;
    }

}

spritelayout spritelayout_Houbunsha_2_purchase {
   ground {
        sprite: GROUNDSPRITE_NORMAL;
   }
   building {
      sprite: spriteset_Houbunsha_PURCHASE(1);
      xoffset: 0; //from NE edge
                yoffset: 0; //from NW edge
                zoffset: 0;
                xextent: 16;
                yextent: 16;
                zextent: 16;
   }
}

//Direction_3
spritelayout spritelayout_Houbunsha_3 {
    ground {
      // normal ground sprite - always draw
      sprite: LOAD_TEMP(0) + LOAD_TEMP(1);
   }
    
    building {
        sprite: spriteset_Houbunsha(2);
        hide_sprite: nearby_tile_height(0, 0) >= snowline_height;
        xoffset: 0; //from NE edge
        yoffset: 0; //from NW edge
        zoffset: 0;
        xextent: 16;
        yextent: 16;
        zextent: 16;
    }

building {
        sprite: spriteset_Houbunsha_SNOW(2);
        hide_sprite: nearby_tile_height(0, 0) < snowline_height;
        xoffset: 0; //from NE edge
        yoffset: 0; //from NW edge
        zoffset: 0;
        xextent: 16;
        yextent: 16;
        zextent: 16;
    }

}

spritelayout spritelayout_Houbunsha_3_purchase {
   ground {
        sprite: GROUNDSPRITE_NORMAL;
   }
   building {
      sprite: spriteset_Houbunsha_PURCHASE(2);
      xoffset: 0; //from NE edge
                yoffset: 0; //from NW edge
                zoffset: 0;
                xextent: 16;
                yextent: 16;
                zextent: 16;
   }
}


//Direction_4
spritelayout spritelayout_Houbunsha_4 {
    ground {
      // normal ground sprite - always draw
      sprite: LOAD_TEMP(0) + LOAD_TEMP(1);
   }
    
    building {
        sprite: spriteset_Houbunsha(3);
        hide_sprite: nearby_tile_height(0, 0) >= snowline_height;
        xoffset: 0; //from NE edge
        yoffset: 0; //from NW edge
        zoffset: 0;
        xextent: 16;
        yextent: 16;
        zextent: 16;
    }

building {
        sprite: spriteset_Houbunsha_SNOW(3);
        hide_sprite: nearby_tile_height(0, 0) < snowline_height;
        xoffset: 0; //from NE edge
        yoffset: 0; //from NW edge
        zoffset: 0;
        xextent: 16;
        yextent: 16;
        zextent: 16;
    }

}

spritelayout spritelayout_Houbunsha_4_purchase {
   ground {
        sprite: GROUNDSPRITE_NORMAL;
   }
   building {
      sprite: spriteset_Houbunsha_PURCHASE(3);
      xoffset: 0; //from NE edge
                yoffset: 0; //from NW edge
                zoffset: 0;
                xextent: 16;
                yextent: 16;
                zextent: 16;
   }
}
//decide spritelayout for each of the 4 directions
switch (FEAT_OBJECTS, SELF, switch_Houbunsha_view, view) {
    1:  spritelayout_Houbunsha_2;
    2:  spritelayout_Houbunsha_3;
    3:  spritelayout_Houbunsha_4;
    spritelayout_Houbunsha_1;
}

//calculate ground sprite for object
switch (FEAT_OBJECTS, SELF, switch_Houbunsha_object, [
//  STORE_TEMP(0, 0),
    STORE_TEMP(slope_to_sprite_offset(tile_slope), 0),
    STORE_TEMP(GROUNDSPRITE_NORMAL, 1),
    STORE_TEMP(terrain_type == TILETYPE_DESERT ? GROUNDSPRITE_DESERT : LOAD_TEMP(1), 1),
    STORE_TEMP(terrain_type == TILETYPE_SNOW   ? GROUNDSPRITE_SNOW : LOAD_TEMP(1), 1),
    STORE_TEMP(snowline_height == 0xFF ? 0xFF : nearby_tile_height(0,0) - snowline_height, 127),
    STORE_TEMP((LOAD_TEMP(127) == -1) ? GROUNDSPRITE_SNOW_1_4 : LOAD_TEMP(1), 1),
    STORE_TEMP((LOAD_TEMP(127) ==  0) ? GROUNDSPRITE_SNOW_2_4 : LOAD_TEMP(1), 1),
    STORE_TEMP((LOAD_TEMP(127) ==  1) ? GROUNDSPRITE_SNOW_3_4 : LOAD_TEMP(1), 1)
        ]) {
    switch_Houbunsha_view;
}

//calculate ground sprite for purchase menu
switch (FEAT_OBJECTS, SELF, switch_Houbunsha_purchase, view) {
    1:  spritelayout_Houbunsha_2_purchase;
    2:  spritelayout_Houbunsha_3_purchase;
    3:  spritelayout_Houbunsha_4_purchase;
    spritelayout_Houbunsha_1_purchase;
}

item (FEAT_OBJECTS, Houbunsha, 002) {
    property {
        class: "PRER";
        classname: string(STR_PRER);
        name: string(STR_JPB2);
        climates_available: ALL_CLIMATES;
        size: [1,1];
        build_cost_multiplier: 1;
        remove_cost_multiplier: 4;
        introduction_date:      date(1111,1,1);
        end_of_life_date: 0xFFFFFFFF;
        object_flags: bitmask(OBJ_FLAG_ANYTHING_REMOVE, OBJ_FLAG_ALLOW_BRIDGE, OBJ_FLAG_REMOVE_IS_INCOME);
        height: 2;
        num_views: 4;
     }
    graphics {
        default: switch_Houbunsha_object;
        purchase: switch_Houbunsha_purchase;
        autoslope: return CB_RESULT_AUTOSLOPE;

      }
}
